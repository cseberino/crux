#!/usr/bin/env python3

"""
interpreter
"""

import evaluate
import re
import sys
import os

BOOL  = "(True|False)"
INT   = "\-?\d+"
TOKEN = ('(\s+)|([\(\)])|(#([^\n]*)(\n|$))|(([^\s"\(\)]+|'
                                  '"(\\\\"|[^"])*(?<=[^\\\\])")((?=[\s\)])|$))')
LIB   = os.path.dirname(os.path.realpath(__file__)) + "/library"

def tokenize(input_):
        """
        Tokenizes.
        """

        tokens = []
        while input_:
                token  = re.match(TOKEN, input_).group(0)
                if not re.match("[\s#]", token[0]):
                        tokens.append(token)
                input_ = input_[len(token):]

        return tokens

def produce(tokens):
        """
        Produces.
        """

        token = tokens.pop(0)
        if token == "(":
                list_ = []
                while tokens[0] != ")":
                        list_.append(produce(tokens))
                tokens.pop(0)
                prod = list_
        else:
                if   re.fullmatch(BOOL, token):
                        atom = (token == "True")
                elif re.fullmatch(INT,  token):
                        atom = int(token)
                elif token[0] == token[-1] == '"':
                        atom = token[1:-1]
                else:
                        atom = (token,)
                prod = atom

        return prod

def parse(input_):
        """
        Parses.
        """

        try:
                tokens = tokenize(input_)
                ast    = []
                while tokens:
                        ast.append(produce(tokens))
        except (AttributeError, IndexError):
                ast = [None]

        return ast

def format_(output):
        """
        Formats.
        """

        result = str(output)
        if   isinstance(output, str):
                result = '"' + output + '"'
        elif isinstance(output, tuple):
                result = output[0]
        elif isinstance(output, list):
                result = "(" + " ".join([format_(e) for e in output]) + ")"

        return result

env = {}
for d in os.walk(LIB):
        for f in d[2]:
                for e in parse(open(os.path.join(d[0], f)).read()):
                        evaluate.evaluate(e, env)
for f in sys.argv[1:]:
        for e in parse(open(f).read()):
                print(format_(evaluate.evaluate(e, env)))
