#!/usr/bin/env python3
#
# Copyright 2020 Christian Seberino
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import evaluate
import re
import os
import sys

BOOL  = "True|False"
INT   = "\-?\d+"
TOKEN = ('\s+|[\(\)]|#([^\n]*)(\n|$)|([^\s"\(\)]+|'
                                   '"(\\\\"|[^"])*(?<=[^\\\\])")((?=[\s\)])|$)')
LIB   = os.path.dirname(os.path.realpath(__file__)) + "/library"

def tokenize(input_):
        """
        Tokenizes.
        """

        tokens = []
        while input_:
                token  = re.match(TOKEN, input_).group(0)
                if not re.match("[\s#]", token[0]):
                        tokens.append(token)
                input_ = input_[len(token):]

        return tokens

def productionize(tokens):
        """
        Productionizes.
        """

        token = tokens.pop(0)
        if token == "(":
                list_ = []
                while tokens[0] != ")":
                        list_.append(productionize(tokens))
                tokens.pop(0)
                prod  = list_
        else:
                if   re.fullmatch(BOOL, token):
                        atom = (token == "True")
                elif re.fullmatch(INT,  token):
                        atom = int(token)
                elif token[0] == token[-1] == '"':
                        atom = token[1:-1]
                else:
                        atom = (token,)
                prod = atom

        return prod

def parse(input_):
        """
        Parses.
        """

        try:
                tokens = tokenize(input_)
                ast    = []
                while tokens:
                        ast.append(productionize(tokens))
        except (AttributeError, IndexError):
                ast = [None]

        return ast

def format_(output):
        """
        Formats.
        """

        if   isinstance(output, str):
                result = '"' + output + '"'
        elif isinstance(output, tuple):
                result = output[0]
        elif isinstance(output, list):
                result = "(" + " ".join([format_(e) for e in output]) + ")"
        else:
                result = str(output)

        return result

env = {}
for d in os.walk(LIB):
        for f in d[2]:
                for e in parse(open(os.path.join(d[0], f)).read()):
                        evaluate.evaluate(e, env)
for e in parse(open(sys.argv[1]).read()):
        print(format_(evaluate.evaluate(e, env)))
